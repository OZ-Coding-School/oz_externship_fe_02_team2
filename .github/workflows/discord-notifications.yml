name: Discord Notifications

on:
  pull_request:
    types: [opened, review_requested, closed]
  pull_request_review:
    types: [submitted]

env:
  WEBHOOK: ${{ secrets.DISCORD_WEBHOOK_URL }}

jobs:
  notify:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: read
    steps:
      # PR 생성 알림
      - name: Notify on PR Opened
        if: github.event_name == 'pull_request' && github.event.action == 'opened'
        uses: actions/github-script@v7
        with:
          script: |
            const webhook = process.env.WEBHOOK;
            const pr = context.payload.pull_request;

            const payload = {
              embeds: [{
                title: "🆕 새로운 PR이 생성되었습니다!",
                description: `[${pr.title}](${pr.html_url})`,
                color: 3447003,
                fields: [
                  { name: "👤 작성자", value: pr.user?.login ?? "unknown", inline: true },
                  { name: "🌿 브랜치", value: `\`${pr.head.ref}\` → \`${pr.base.ref}\``, inline: true },
                  { name: "📊 변경사항", value: `+${pr.additions ?? 0} -${pr.deletions ?? 0}`, inline: true },
                ],
                timestamp: pr.created_at
              }]
            };

            await fetch(webhook, {
              method: "POST",
              headers: { "Content-Type": "application/json" },
              body: JSON.stringify(payload),
            });

      # 여러 리뷰어 멘션 (중복 방지 포함)
      - name: Mention Reviewers (on review_requested)
        if: github.event_name == 'pull_request' && github.event.action == 'review_requested'
        uses: actions/github-script@v7
        with:
          script: |
            const webhook = process.env.WEBHOOK;
            const pr = context.payload.pull_request;

            // 요청된 전체 리뷰어 목록과 현재(트리거) 리뷰어
            const reviewers = (pr.requested_reviewers ?? []).map(u => u.login);
            const current = context.payload.requested_reviewer?.login ?? null;
            const first = reviewers[0] ?? null;

            // 첫 번째 리뷰어만 알림 전송 (중복 방지)
            if (first && current && current !== first) {
              core.info(`Skip: ${current} is not the first reviewer (${first}).`);
              return;
            }

            // GitHub login -> Discord mention 매핑
            const mapMention = (login) => ({
              "chen4023": "<@683563560063991848>",
              "Kwonyeojiny": "<@579296258091646976>",
              "wrongstory": "<@256645987638968320>",
              "minjekim64": "<@595553015990059009>",
              "rlaalsckd4": "<@704883949146472449>",
              "makee-ham": "<@534334882512633862>",
              "shin-minhyuk": "<@1121074841102069814>",
            }[login] ?? `@${login}`);

            // 멘션 목록 (요청된 리뷰어가 없으면 current 사용)
            const targetLogins = reviewers.length ? reviewers : (current ? [current] : []);
            if (!targetLogins.length) {
              core.info("No reviewers to notify.");
              return;
            }
            const mentions = targetLogins.map(mapMention).join(" ");

            const payload = {
              content: `🔍 **리뷰 요청이 도착했습니다!** ${mentions}`,
              embeds: [{
                title: "리뷰를 부탁드립니다! 👀",
                description: `[${pr.title}](${pr.html_url})`,
                color: 16776960,
                fields: [
                  { name: "👤 PR 작성자", value: pr.user?.login ?? "unknown", inline: true },
                  { name: "📁 변경사항", value: `파일 ${pr.changed_files ?? 0}개 | +${pr.additions ?? 0} -${pr.deletions ?? 0}`, inline: false },
                ],
              }]
            };

            await fetch(webhook, {
              method: "POST",
              headers: { "Content-Type": "application/json" },
              body: JSON.stringify(payload),
            });

      # PR 병합/닫힘 알림
      - name: Notify on PR Closed
        if: github.event_name == 'pull_request' && github.event.action == 'closed'
        uses: actions/github-script@v7
        with:
          script: |
            const webhook = process.env.WEBHOOK;
            const pr = context.payload.pull_request;

            const merged = !!pr.merged;
            const statusTitle = merged ? "✅ 병합 완료!" : "❌ PR 닫힘";
            const emoji = merged ? "🎉" : "🚫";
            const color = merged ? 65280 : 16711680;

            const payload = {
              embeds: [{
                title: `${emoji} ${statusTitle}`,
                description: `[${pr.title}](${pr.html_url})`,
                color,
                fields: [
                  { name: "👤 작성자", value: pr.user?.login ?? "unknown", inline: true },
                  { name: "🌿 브랜치", value: `\`${pr.head.ref}\` → \`${pr.base.ref}\``, inline: true },
                ],
              }]
            };

            await fetch(webhook, {
              method: "POST",
              headers: { "Content-Type": "application/json" },
              body: JSON.stringify(payload),
            });

      # 리뷰 승인 알림
      - name: Notify on Review Approved
        if: github.event_name == 'pull_request_review' && github.event.review.state == 'approved'
        uses: actions/github-script@v7
        with:
          script: |
            const webhook = process.env.WEBHOOK;
            const pr = context.payload.pull_request;
            const review = context.payload.review;

            const mapMention = (login) => ({
              "chen4023": "<@683563560063991848>",
              "Kwonyeojiny": "<@579296258091646976>",
              "wrongstory": "<@256645987638968320>",
              "minjekim64": "<@595553015990059009>",
              "rlaalsckd4": "<@704883949146472449>",
              "makee-ham": "<@534334882512633862>",
              "shin-minhyuk": "<@1121074841102069814>",
            }[login] ?? `@${login}`);

            const authorMention = mapMention(pr.user?.login ?? "unknown");

            const payload = {
              content: `👍 **리뷰가 승인되었습니다!** ${authorMention}`,
              embeds: [{
                title: "✅ 리뷰 승인 완료!",
                description: `[${pr.title}](${pr.html_url})`,
                color: 65280,
                fields: [
                  { name: "👀 리뷰어", value: review.user?.login ?? "unknown", inline: true },
                  { name: "💬 리뷰 내용", value: "승인되었습니다!", inline: false },
                ],
                footer: { text: "이제 병합할 수 있습니다! 🚀" }
              }]
            };

            await fetch(webhook, {
              method: "POST",
              headers: { "Content-Type": "application/json" },
              body: JSON.stringify(payload),
            });

      # 변경 요청 알림
      - name: Notify on Changes Requested
        if: github.event_name == 'pull_request_review' && github.event.review.state == 'changes_requested'
        uses: actions/github-script@v7
        with:
          script: |
            const webhook = process.env.WEBHOOK;
            const pr = context.payload.pull_request;
            const review = context.payload.review;

            const mapMention = (login) => ({
              "chen4023": "<@683563560063991848>",
              "Kwonyeojiny": "<@579296258091646976>",
              "wrongstory": "<@256645987638968320>",
              "minjekim64": "<@595553015990059009>",
              "rlaalsckd4": "<@704883949146472449>",
              "makee-ham": "<@534334882512633862>",
              "shin-minhyuk": "<@1121074841102069814>",
            }[login] ?? `@${login}`);

            const authorMention = mapMention(pr.user?.login ?? "unknown");

            const payload = {
              content: `🔄 **변경사항이 요청되었습니다!** ${authorMention}`,
              embeds: [{
                title: "❗ 수정이 필요합니다",
                description: `[${pr.title}](${pr.html_url})`,
                color: 16776960,
                fields: [
                  { name: "👀 리뷰어", value: review.user?.login ?? "unknown", inline: true },
                  { name: "📝 요청사항", value: "변경사항이 요청되었습니다. 자세한 내용은 PR을 확인해주세요.", inline: false },
                ],
              }]
            };

            await fetch(webhook, {
              method: "POST",
              headers: { "Content-Type": "application/json" },
              body: JSON.stringify(payload),
            });
